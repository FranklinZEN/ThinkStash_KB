// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- NextAuth.js Models ---

// User model (adjust fields as needed, e.g., add password for Credentials provider)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String // Added for local auth
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Application-specific relations
  folders        Folder[]
  knowledgeCards KnowledgeCard[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Application Models ---

model Folder {
  id        String          @id @default(cuid())
  name      String
  userId    String
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  cards     KnowledgeCard[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model KnowledgeCard {
  id        String   @id @default(cuid())
  title     String
  content   Json // Using Json type as per ADR-004
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId  String?
  folder    Folder?  @relation(fields: [folderId], references: [id])
  tags      Tag[]    @relation("CardTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id        String          @id @default(cuid())
  name      String          @unique
  cards     KnowledgeCard[] @relation("CardTags")
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}
